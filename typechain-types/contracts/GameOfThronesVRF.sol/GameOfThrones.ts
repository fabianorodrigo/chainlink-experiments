/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface GameOfThronesInterface extends utils.Interface {
  functions: {
    "house(address)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "rollDice(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "house" | "rawFulfillRandomWords" | "rollDice"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "house", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "rollDice", values: [string]): string;

  decodeFunctionResult(functionFragment: "house", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollDice", data: BytesLike): Result;

  events: {
    "DiceLanded(uint256,uint256)": EventFragment;
    "DiceRolled(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiceLanded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiceRolled"): EventFragment;
}

export interface DiceLandedEventObject {
  requestId: BigNumber;
  result: BigNumber;
}
export type DiceLandedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DiceLandedEventObject
>;

export type DiceLandedEventFilter = TypedEventFilter<DiceLandedEvent>;

export interface DiceRolledEventObject {
  requestId: BigNumber;
  roller: string;
}
export type DiceRolledEvent = TypedEvent<
  [BigNumber, string],
  DiceRolledEventObject
>;

export type DiceRolledEventFilter = TypedEventFilter<DiceRolledEvent>;

export interface GameOfThrones extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameOfThronesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    house(player: string, overrides?: CallOverrides): Promise<[string]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rollDice(
      roller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  house(player: string, overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rollDice(
    roller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    house(player: string, overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    rollDice(roller: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DiceLanded(uint256,uint256)"(
      requestId?: BigNumberish | null,
      result?: BigNumberish | null
    ): DiceLandedEventFilter;
    DiceLanded(
      requestId?: BigNumberish | null,
      result?: BigNumberish | null
    ): DiceLandedEventFilter;

    "DiceRolled(uint256,address)"(
      requestId?: BigNumberish | null,
      roller?: string | null
    ): DiceRolledEventFilter;
    DiceRolled(
      requestId?: BigNumberish | null,
      roller?: string | null
    ): DiceRolledEventFilter;
  };

  estimateGas: {
    house(player: string, overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rollDice(
      roller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    house(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rollDice(
      roller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
